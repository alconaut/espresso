{// Package parser is used for parsing Espresso, a human friendly
// format based on a subset of CoffeeScript, as defined by spec [1].
//
// It is automatically generated by pigeon [2].
// Do not edit manually, make changes to PEG file instead.
//
// [1]: https://github.com/anonx/espresso
// [2]: https://github.com/PuerkitoBio/pigeon
package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

func interfaceSlice(v interface{}) []interface{} {
	if v == nil {
		return nil
	}
	return v.([]interface{})
}
}

Espresso <- _ val:Value? _ EOF {
	return val, nil
}

Object <- '{' _ vals:(_ val:KVPair _ {return val, nil})* _ '}' {
	lst := interfaceSlice(vals)
	obj := make(map[interface{}]interface{}, len(lst))
	for i := 0; i < len(lst); i++ {
		t := interfaceSlice(lst[i])
		obj[t[0]] = t[1]
	}
	return obj, nil
}

KVPair <- k:InlineKey _ v:Value {
	return []interface{}{k, v}, nil
}

InlineObject <- vals:(Space* val:InlineKVPair {return val, nil})+ {
	lst := interfaceSlice(vals)
	obj := make(map[interface{}]interface{}, len(lst))
	for i := 0; i < len(lst); i++ {
		t := interfaceSlice(lst[i])
		obj[t[0]] = t[1]
	}
	return obj, nil
}

InlineKVPair <- k:InlineKey v:Value {
	return []interface{}{k, v}, nil
}

List <- '[' _ vals:ListBody* _ ']' {
	return vals, nil
}

ListBody <- _ val:Value _ {
	return val, nil
}

Value <- InlineObject / String / Object / List / InlineValue

InlineValue <- Boolean / InlineString / Integer

InlineKey <- val:(InlineValue / PureKey) KeyDelim Space* {
	return fmt.Sprintf("%s", val), nil
}

PureKey <- (!KeyDelim !Space !Quote !InlineQuote !LBreak Printable)+ {
	return string(c.text), nil
}

String <- Quote (!Quote Printable)* Quote {
	return strconv.Unquote(string(c.text))
}

InlineString <- InlineQuote (!InlineQuote !LBreak Printable)* InlineQuote {
	return strconv.Unquote(string(c.text))
}

Integer <- '-'? ('0' / [1-9]+ [0-9]*) {
	return strconv.ParseInt(string(c.text), 10, 0)
}

Boolean <- ("true" / "false") {
	if string(c.text) == "true" {
		return true, nil
	}
	return false, nil
}

Comment <- '#' (!LBreak Printable)* LBreak

Printable <- "\t" / "\n" / "\r" / [ -~] / "…"
	/ [\xA0-\xD7FF] / [\xE000-\xFFFD] / [\x10000-\x10FFFF] / [а-я]

_ "whitespace" <- (Space / LBreak / Comment)*

LBreak <- "\r\n" / "\r" / "\n"

Space <- " " / "\t"

KeyDelim <- ':' Space*

Quote <- '`'

InlineQuote <- '"'

EOF <- !.
